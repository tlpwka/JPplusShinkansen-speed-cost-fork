
switch (FEAT_TRAINS, PARENT, func_is_reversed, vehicle_is_reversed) {return;}

switch (FEAT_TRAINS, PARENT, NumberCarsInConsist, num_vehs_in_consist / 3) {return;}

switch (FEAT_TRAINS, SELF, RunningCostFactor, current_speed) {
        0: return 1/10 ;        	// Stopped
        1..15: return 1/4 ;        	// Moving below ~33.5 mph
        return 1; 				    // Track speed
    }

switch (FEAT_TRAINS, SELF, CapacityFactor, param_basecapacity) {
        1: return 5/4;       		// 1.25x Real World Capacity
        2: return 3/2;       		// 1.5x Real World Capacity
        3: return 2;                // 2x Real World Capacity 
        return 1;          		    // 1x Real World Capacity
    }

switch (FEAT_TRAINS, SELF, sw_visual_effect_and_powered, ((position_in_articulated_veh == 0) && !func_is_reversed()) || ((position_in_articulated_veh_from_end == 0) && func_is_reversed()) ) {
	1: return visual_effect_and_powered(VISUAL_EFFECT_ELECTRIC, 0, ENABLE_WAGON_POWER);
	return visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
}
/*	COST	*/
if (param_running_cost == 1) {
	param_running = 1;
}
if (param_running_cost == 2) {
	param_running = 2;
}	
if (param_running_cost == 4) {
	param_running = 4;
}
if (param_running_cost == 8) {
	param_running = 8;
}
/*	CARGO DECAY	*/
if (param_cargodecay == 0) {
	param_decay_express = 256;
}
if (param_cargodecay == 1) {
	param_decay_express = 384;
}
if (param_cargodecay >= 2) {
	param_decay_express = 512;
}

/*	LOADING SPEEDS	*/
if (param_basecapacity == 0) {
	param_loading_1D = 8;       // 1 door //
	param_loading_2D = 4;      // 2 doors //
}
if (param_basecapacity == 1) {
	param_loading_1D = 8;       // 1 door //
	param_loading_2D = 4;      // 2 doors //
}
if (param_basecapacity == 2) {
	param_loading_1D = 8;       // 1 door //
	param_loading_2D = 4;      // 2 doors //
}

/* LENGTHS */

// Standard 2-8-2 Length
    switch (FEAT_TRAINS, SELF, sw_length_2_8_2, position_in_articulated_veh % 3) {
        1: return 8;
        return 2;
    }

// Standard 1-8-1 Length
    switch (FEAT_TRAINS, SELF, sw_length_1_8_1, position_in_articulated_veh % 3) {
        1: return 8;
        return 1;
    }

switch (FEAT_TRAINS, SELF, sw_param_length, param_spritelength) {
        1: sw_length_1_8_1;		    // Length 10
        sw_length_2_8_2;			// Length 12
    }

// Return 1 if a cab
    switch(FEAT_TRAINS, SELF, IsCab, 
            position_in_consist == 0 || 
            position_in_consist == 1 || 
            position_in_consist == 2 || 
            position_in_consist_from_end == 0 ||
            position_in_consist_from_end == 1 ||
            position_in_consist_from_end == 2
        ) {return;}

// Return Car Number
    switch(FEAT_TRAINS, SELF, CarNumber, ( position_in_consist + 3 ) / 3 ) {return;}
    switch(FEAT_TRAINS, SELF, CarNumberFromEnd, ( position_in_consist_from_end + 3 ) / 3 ) {return;}

// Min Length Check
    switch (FEAT_TRAINS, SELF, sw_stop_start_full_length_4, num_vehs_in_consist < 12) {				
		1:  return string(STR_LENGTH_ERROR); 				
		return CB_RESULT_NO_TEXT; 
	}

// Attach Mucar Full
    switch(FEAT_TRAINS, SELF, sw_attach_mu_car_full, [vehicle_type_id == mu_car_full]) {
        0: return string(ONLY_ADD_MUCAR);
    }

    switch(FEAT_TRAINS, SELF, sw_attach_mu_car_mail, [vehicle_type_id == mu_car_mail]) {
		0: return string(ONLY_ADD_MUCAR);
	}

    switch(FEAT_TRAINS, SELF, sw_attach_mu_car_maglev, [vehicle_type_id == mu_car_maglev]) {
        0: return string(ONLY_ADD_MUCAR);
    }


// Mid Check
    switch(FEAT_TRAINS, SELF, HideLongSprite, other_veh_curv_info(1) == 0 && other_veh_curv_info(-1) == 0 && other_veh_z_offset(1) == 0 && other_veh_z_offset(-1) == 0 ) {return;}

// Front Check
    switch(FEAT_TRAINS, SELF, NextPartSame, other_veh_curv_info(1) == 0 && other_veh_z_offset(1) == 0 && other_veh_z_offset(2) == 0 ) {return;}
    switch(FEAT_TRAINS, SELF, PrevPartSame, other_veh_curv_info(-1) == 0 && other_veh_z_offset(-1) == 0 && other_veh_z_offset(-2) == 0 ) {return;}

// Pantos on Evens
    switch(FEAT_TRAINS, SELF, PantoOnCabEvenConsist, num_vehs_in_consist % 2 == 0 ) {return;}
    switch(FEAT_TRAINS, SELF, EvenCarForward, CarNumber() % 2 == 0 ) {return;}
    switch(FEAT_TRAINS, SELF, EvenCarBackward, CarNumberFromEnd() % 2 == 0 ) {return;}
